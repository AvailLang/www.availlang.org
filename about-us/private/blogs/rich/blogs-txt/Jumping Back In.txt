<p>So it has been a few weeks since <a href="/content/tries-and-more-trees">my last blog post</a>.  Being the holidays (aka Thanksgiving), I had planned to go on a trip with some friends.  I stopped in Tampa for Thanksgiving with my family on my way to Peru.  It was a fantastic, somewhat long whirlwind tour that involved a mini trip to Chicago the weekend before I left for Tampa and run up to Green Bay for a Packers game the day after I got home.  While in Peru I did what I think most people should do, visit Machu Picchu (one of the new 7 wonders of the world).  It is a site to behold, but if you aren't careful, it will break your toe.  Ok, I don't know if that is true for everyone, but it was true for me.  Not a horrible injury as I was able to climb down and still enjoy my vacation just fine.</p>

<p>But this isn't a blog about <em>"Rich's Adventures Around the World"</em>.  It is more about <em>"Rich's Adventures in Programming"</em>.  My other adventures just happened to take me away from Avail for a few weeks.  In fact, I've really only been home since this past Monday.  I did manage to stare at Avail for a few hours while editing photos from my trip last weekend, but I really didn't make much progress.  You see, at the moment any type of progress in Avail is exactly what I'm trying to achieve.  I figure getting something done will rebuild my momentum and get me going again.  So I'm taking a slightly different approach with this blog than I have for prior blogs: I'm blogging <em>before</em> I program.  As many programmers out there know, it is often hard to pick up where you left off on a project after a long break.  As the title of this blog indicates, I am trying to jump back in where I left off.  The tricky bit for me is not only am I doing this for Avail, I'm also doing this for my day job.  Splitting my focus on two completely different projects in two completely different technologies isn't the easiest thing to do.  That's why I didn't blog after staring at Avail for hours last Saturday and why I've put forth my energies into reestablishing my focus at my day job the past several days (actually 6 days putting in about 60 hours).</p>

<p>But hey, now I'm back and I'm trying to use this blog as a way to refocus on my work with Avail.  I took a break from Avail and that can be a good thing.  Walking away from a problem I was working on (I didn't have a programming environment at Machu Picchu) is a good way to acquire a different vantage point when looking at that problem.  The new vantage point has me a bit concerned about my most recent work.  My detour with Patricia Tries to create a high level abstraction that I could use over and over again in the <em>Avail Scanner</em> is now being called into question...by me.  I firmly believe that the detour was worthwhile in my education and development as a programmer, but now I'm having doubts that I can actually use the abstractions I have made.</p>  

<p>The problem is that each type of delimited region varies wildly.  Quoted strings is very different from standard comments and Avail comments.  With quoted strings you have a single character delimited region whose start and stop delimiter is the same character.  The delimited region can also contain escape characters that permit the insertion of the delimiter into the region without acting as a delimiter.  There is also the insertion of line breaks in a quoted region in the Avail file for the purpose of breaking the string over multiple lines without actually capturing the new line and excess white space in the string.  So what can I do to my Patricia Trie abstraction to handle these circumstances without making so specific that it can only ever be used for this specific case?</p>

<p>Comments pose another difficulty.  Standard comments and Avail comments have string delimiters that differ for the opening of the delimited region, but have the same closing delimiters (open: <code>/**</code>, <code>/*</code> close: <code>*/</code>).  I have to be able to recognize nested comments using the alternate start delimiter when processing a delimited region so I know when the appropriate close occurs.  Do I create another implementation of <code>"read_'s⁇region delimited by_and_«with|without»!nesting"</code> that accepts a tuple of delimiter pairs?  If I start out with a regular comment that has nested in it an Avail comment, I need to ignore the whole comment, however in the opposite situation, I want to capture the Avail comment, but I want to ignore the nested regular comment.  And what about new lines?  I need to capture those and keep track of them.</p>

<p>I could create a much more complex method with the signature:
<div class="restricted-width-container">
<div class="good-code-block">
Method "read_'s⁇region «with|without»!nesting delimited by_
	«while handling the special cases⁇_»" is
[
	scanner : Avail scanner,
	nesting : [1..2],
	delimiters : &lt;&lt;nonempty string…|2>…|1..>,
	specials : &lt;&lt;character,[]→⊤…|2>…|>
 |
	/* buckets of code */
]: string;</div></div>
and have a variation for character delimiters, but it feels like I'm trying to cram way too much into one monster method.  The whole point of the abstractions was to avoid the monster methods.  In any event, the method signature above is for a method that would take as inputs an Avail Scanner (the input file that is being scanned), the nesting switch which performs appropriate behavior for nested/not nested regions, a tuple of delimiters by which the regions are delimited, and a tuple of special characters and the functions that defines the manner in which they are handled.</p>

<p>Would a method like this really be all that horrible?  If I predefine the function calls and store them into a variable, then the worst call of it lets say for comments would look something like:
<code>read scanner's region with nesting delimited by &lt;&lt;"/**","*/">,&lt;"/*","*/">> while 
handling the special cases &lt;&lt;¢"\n",newlineFunction>,&lt;¢`,escapeCharFunction>></code>
For a quoted region, there wouldn't be nesting, but it would require an additional special function to handle line breaks in the quoted region without having the string contain the line break and white space.  Is that  really so bad?
</p>

<p>So where am I now?  I'm at 4&20 Bakery at noon on Sunday (where I consumed some pretty damn good pumpkin bread french toast).  It has been snowing for hours (sledding tomorrow?) and the crockpot is slowly working on my dinner (which won't be ready for another 5 hours).  Perhaps a trip down the road of writing this method is just what I need to do.  It may prove useful to the actual project and it may not, but I'm thinking that it just might do the one thing I need most right now, and that's to get my head back in the game.</p>